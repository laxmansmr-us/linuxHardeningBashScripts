{
    "schemaVersion": "2.2",
    "description": "Use this document to deploy and configure Sophos antivirus ",
    "mainSteps": [
      {
        "action": "aws:runShellScript",
        "name": "runShellScript",
        "precondition": {
          "StringEquals": [
            "platformType",
            "Linux"
          ]
        },
        "inputs": {
          "runCommand": [

            "#!/bin/bash",

            "mkdir -p /var/log/path",
            "touch /var/log/path/hardening.log",
            "log_file=/var/log/path/hardening.log",

            "# Function to log messages",
            "log() {",
            "local log_level=$1",
            "local message=$2",
            "local timestamp=$(date +'%Y-%m-%d %H:%M:%S')",
            "echo \"[$timestamp] [$log_level] - $message\" >> $log_file",
            "}",

            "# 3.3.7 Ensure Reverse Path Filtering is enabled (Automated) ",
            "# set the net.ipv4.conf.all.rp_filter = 1 value",
            "if [ $(sysctl -n net.ipv4.conf.all.rp_filter) != \"1\" ]; then",
            "log \"INFO\" \"the net.ipv4.conf.all.rp_filter = 1 value does not set, working on setting it now\"",
            "printf \"net.ipv4.conf.all.rp_filter = 1\n\" >> /etc/sysctl.d/60-netipv4_sysctl.conf",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"the net.ipv4.conf.all.rp_filter = 1 value has been set successfully into /etc/sysctl.d/60-netipv4_sysctl.conf\"",
            "else",
            "log \"INFO\" \"failed to set the net.ipv4.conf.all.rp_filter = 1 value into /etc/sysctl.d/60-netipv4_sysctl.conf\"",
            "fi",
            "# set the active kernel parameters",
            "sysctl -w net.ipv4.conf.all.rp_filter=1",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The net.ipv4.conf.all.rp_filter=1 value has been set as active kernel parameter successfully\"",
            "else",
            "log \"INFO\" \"failed to set the net.ipv4.conf.all.rp_filter=1 value as active kernel parameter\"",
            "fi",
            "# immediately flush and reload the routing table cache",
            "sysctl -w net.ipv4.route.flush=1",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The Routing table has been flushed and reloaded successfully\"",
            "else",
            "log \"INFO\" \"failed to flush/reload the routing table\"",
            "fi",
            "else",
            "log \"INFO\" \"The net.ipv4.conf.all.rp_filter value is equal to 1 already\"",
            "fi",
            "# set the net.ipv4.conf.default.rp_filter = 1 value",
            "if [ $(sysctl -n net.ipv4.conf.default.rp_filter) != \"1\" ]; then",
            "log \"INFO\" \"the net.ipv4.conf.default.rp_filter = 1 value does not set, working on setting it now\"",
            "printf \"net.ipv4.conf.default.rp_filter = 1\n\" >> /etc/sysctl.d/60-netipv4_sysctl.conf",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"the net.ipv4.conf.default.rp_filter = 1 value has been set successfully into /etc/sysctl.d/60-netipv4_sysctl.conf\"",
            "else",
            "log \"INFO\" \"failed to set the net.ipv4.conf.default.rp_filter = 1 value into /etc/sysctl.d/60-netipv4_sysctl.conf\"",
            "fi",
            "# set the active kernel parameters",
            "sysctl -w net.ipv4.conf.default.rp_filter=1",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The net.ipv4.conf.default.rp_filter=1 value has been set as active kernel parameter successfully\"",
            "else",
            "log \"INFO\" \"failed to set the net.ipv4.conf.default.rp_filter=1 value as active kernel parameter\"",
            "fi",
            "# immediately flush and reload the routing table cache",
            "sysctl -w net.ipv4.route.flush=1",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The Routing table has been flushed and reloaded successfully\"",
            "else",
            "log \"INFO\" \"failed to flush/reload the routing table\"",
            "fi",
            "else",
            "log \"INFO\" \"The net.ipv4.conf.default.rp_filter value is equal to 1 already\"",
            "fi",

            "# 3.3.8 Ensure TCP SYN Cookies is enabled (Automated)",
            "if [ $(sysctl -n net.ipv4.tcp_syncookies) != \"1\" ]; then",
            "log \"INFO\" \"the net.ipv4.tcp_syncookies=1 value does not set, working on setting it now\"",
            "printf \"net.ipv4.tcp_syncookies = 1\n\" >> /etc/sysctl.d/60-netipv4_sysctl.conf",
            "if [ $? -eq 0 ]; then ",
            "log \"INFO\" \"The net.ipv4.tcp_syncookies = 1 value has been set into /etc/sysctl.d/60-netipv4_sysctl.conf\"",
            "else",
            "log \"INFO\" \"failed to set the net.ipv4.tcp_syncookies = 1 value into /etc/sysctl.d/60-netipv4_sysctl.conf\"",
            "fi",
            "# set as active kernel parameters",
            "sysctl -w net.ipv4.tcp_syncookies=1",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The net.ipv4.tcp_syncookies=1 value has been set as active kernel parameter successfully\"",
            "else",
            "log \"INFO\" \"failed to set the net.ipv4.tcp_syncookies=1 value as active kernel parameter\"",
            "fi",
            "# flush/reload the routing table ",
            "sysctl -w net.ipv4.route.flush=1",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The Routing table has been flushed and reloaded successfully\"",
            "else",
            "log \"INFO\" \"failed to flush/reload the routing table\"",
            "fi",
            "else",
            "log \"INFO\" \"The net.ipv4.tcp_syncookies value is equal to 1 already\"",
            "fi",


            "# 3.4.1.1 Ensure firewalld is installed (Automated)",
            "if [ rpm -q firewalld iptables ]; then",
            "log \"INFO\" \"the firewalld/iptables packages are installed, working on uninstlling them now\"",
            "yum remove firewalld iptables -y",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"the firewalld/iptables packages has been removed successfully\"",
            "else    ",
            "log \"INFO\" \"failed to uninstall firewalld/iptables\"",
            "fi",
            "else    ",
            "log \"INFO\" \"the firewalld/iptables packages are not exist already\"",
            "fi",

            "# 4.1.1.1 Ensure auditd is installed (Automated)",
            "if [ \"rpm -q audit\" ]; then",
            "log \"INFO\" \"The audit is exist already\"",
            "else",
            "log \"INFO\" \"The audit is not exist, working on installing it now\"",
            "yum install audit -y",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"audit has been installed successfully\"",
            "else",
            "log \"INFO\" \"failed to install audit pacakge\"",
            "fi",
            "fi",
                      
                      
            "# 4.1.1.2 Ensure auditd service is enabled (Automated)",
            "if systemctl is-enabled auditd; then",
            "log \"INFO\" \"The auditd serivce is enable already\"",
            "else",
            "log \"INFO\" \"The auditd serivce is not enabled, working on enabling it now\"    ",
            "# enabel the service",
            "systemctl --now enable auditd",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The auditd service is enabled successfully\"",
            "else ",
            "log \"INFO\" \"failed to enable The auditd service\"",
            "fi    ",
            "# start the service",
            "systemctl --now start auditd",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The auditd service is started successfully\"",
            "else ",
            "log \"INFO\" \"failed to start The auditd service\"",
            "fi ",
            "fi",
                      
                      
                      
            "# 4.1.1.3 Ensure auditing for processes that start prior to auditd is enabled (Automated)",
            "if [ \"find /boot -type f -name 'grubenv' -exec grep -P 'kernelopts=([^#\n\r]+\\h+)?(audit=1)' {} \\;\" == \"audit=1\" ]; then",
            "log \"INFO\" \"The auditing for processes that start prior is enabled already\"",
            "else",
            "log \"INFO\" \"The auditing for processes that start prior is disbaled, working on enable it now\"",
            "grubby --update-kernel ALL --args 'audit=1'",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The auditing for processes that start prior is enabled successfully\"",
            "else ",
            "log \"INFO\" \"failed to enable The auditing for processes that start prior\"",
            "fi     ",
            "fi",
                      
                      
            "# 4.1.1.4 Ensure audit_backlog_limit is sufficient (Automated)",
            "if [ \"find /boot -type f -name 'grubenv' -exec grep -P'kernelopts=([^#\n\r]+\\h+)?(audit_backlog_limit=\\S+\b)' {} \\;\" == \"8192\" ]; then",
            "log \"INFO\" \"audit_backlog_limit is sufficient already with 8192\"",
            "else",
            "log \"INFO\" \"audit_backlog_limit is NOT sufficient with 8192\"    ",
            "grubby --update-kernel ALL --args 'audit_backlog_limit=8192'",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The audit_backlog_limit has been set successfully with 8192\"",
            "else ",
            "log \"INFO\" \"failed to set The audit_backlog_limit with 8192\"",
            "fi  ",
            "fi",
                      
                      
            "# 4.1.2.1 Ensure audit log storage size is configured (Automated)",
            "if [ \"grep -w \"^\\s*max_log_file\\s*=\" /etc/audit/auditd.conf\" == \"8\" ]; then",
            "log \"INFO\" \"The audit log storage size is configured already to 8\"",
            "else",
            "log \"INFO\" \"The audit log storage size is NOT configured to 8, Working on set it now\"",
            "sid -i '/max_log_file/ { s/.*/max_log_file = 8 }' /etc/audit/auditd.conf",
            "# check Previos command result",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The value of max_log_file has been set to 8 successfully\"",
            "else",
            "log \"INFO\" \"Failed/alreadyExist to set the max_log_file value to 8 to /etc/audit/auditd.conf\"",
            "fi",
            "fi",
                      
                      
            "# 4.1.2.2 Ensure audit logs are not automatically deleted (Automated)",
            "if [ \"grep max_log_file_action /etc/audit/auditd.conf\" == \"keep_logs\" ]; then",
            "log \"INFO\" \"The audit logs are automatically deleted is configured already to keep_logs\"",
            "else",
            "log \"INFO\" \"The audit logs are automatically deleted is NOT configured to keep_logs, Working on set it now\"",
            "sid -i '/max_log_file_action/ { s/.*max_log_file_action = keep_logs }' /etc/audit/auditd.conf",
            "# check Previos command result",
            "if [ $? -eq 0 ]; then",
            "log \"INFO\" \"The value of max_log_file_action has been set to keep_logs successfully\"",
            "else",
            "log \"INFO\" \"Failed/alreadyExist to set the max_log_file_action value to keep_logs to /etc/audit/auditd.conf\"",
            "fi",
            "fi",
                      
                      
            "# 4.1.3.1 Ensure changes to system administration scope (sudoers) is collected (Automated)",
            "# take this script as a refrence 58-auditLogStorage.sh",
            "if grep -i \"\\-w /etc/sudoers \\-p wa \\-k scope\" /etc/audit/rules.d/* || grep -i \"\\-w /etc/sudoers.d \\-p wa \\-k scope\" /etc/audit/rules.d/*; then",
              "log \"INFO\" \"The audit of sudoers scope is configured already\"",
            "else",
              "log \"INFO\" \"The audit of sudoers scope is NOT configured, working on configure it now\"   ",
                      
              "printf \" -w /etc/sudoers -p wa -k scope\n-w /etc/sudoers.d -p wa -k scope\n\" >> /etc/audit/rules.d/50-scope.rules",
              "if [ $? -eq 0 ]; then",
                "log \"INFO\" \"the audit of sudoers scope parameters has been set successfully at /etc/audit/rules.d/50-scope.rules\"   ",
              "else",
                "log \"INFO\" \"failed to set the audit of sudoers scope parameters at /etc/audit/rules.d/50-scope.rules\"",
              "fi",
                      
            "# Merge and load the rules into active configuration",
            "augenrules --load",
                      
            "# check if rebooted is required",
            "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
            "fi",


            "# 4.1.3.2 Ensure actions as another user are always logged (Automated)",
"if grep -i \"\\-a always,exit \\-F arch=b64 \\-C euid!=uid \\-F auid!=unset \\-S execve \\-k user_emulation\" /etc/audit/rules.d/* || grep -i \"\\-a always,exit \\-F arch=b32 \\-C euid!=uid \\-F auid!=unset \\-S execve \\-k user_emulation\"; then",
"log \"INFO\" \"The audit of actions as another user is configured already\"",
"else",
"log \"INFO\" \"The audit of actions as another user is NOT configured\"",
"printf \"",
"-a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k user_emulation",
"-a always,exit -F arch=b32 -C euid!=uid -F auid!=unset -S execve -k user_emulation",
"\" >> /etc/audit/rules.d/50-user_emulation.rules",
"if [ $? -eq 0 ]; then",
"log \"INFO\" \"the audit actions as another user parameters has been set successfully at /etc/audit/rules.d/50-user_emulation.rules\"   ",
"else",
"log \"INFO\" \"failed to set the audit actions as another user parameters at /etc/audit/rules.d/50-user_emulation.rules\"  ",
"fi",
"# Merge and load the rules into active configuration",
"augenrules --load",
"# check if rebooted is required",
"if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
"fi",

"# 4.1.3.3 Ensure events that modify the sudo log file are collected (Automated) ",
"# grep the logfile PATH of sudoers | delete everything before logfile PATH and after",

"SUDO_LOG_FILE=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,?.*//' -e 's/\"//g')",
"# Check if SUDO_LOG_FILE is empty or not, if it is empty print",

"if [ -z \"$SUDO_LOG_FILE\" ]; then",
  "log \"INFO\" \"No Log File Set: No actions will be performed in this case.\"",
"else",
  "CONTINUE=\"YES\"",
  "fi",
  "# Check if the file contains the metioned line",
  "if grep -i -r \"\\-w ${SUDO_LOG_FILE} \\-p wa \\-k sudo_log_file\" /etc/audit/rules.d*; then",
  "log \"INFO\" \"the logfile path is configred already, Nothing to do\"",
  "else",
  "log \"INFO\" \"the logfile path is Not configred, Working on set it now\"   ",
  "printf \"-w ${SUDO_LOG_FILE} -p wa -k sudo_log_file\" >> /etc/audit/rules.d/50-sudo.rules",
  "# check the output result",
  "if [ $? -eq 0 ]; then",
  "log \"INFO\" \"The sudoers logfile path has been set sueccfully under /etc/audit/rules.d/50-sudo.rules*\"",
  "else",
  "log \"INFO\" \"Failed to set the logfile path under /etc/audit/rules.d/50-sudo.rules\"    ",
  "fi",
  "# Merge and load the rules into active configuration?",
  "augenrules --load",
  "# Check if reboot is required",
  "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
"fi",



"# 4.1.3.4 Ensure events that modify date and time information are collected (Automated)",
"if grep -i -r \"\\-a always,exit \\-F arch=b64 \\-S adjtimex,settimeofday,clock_settime \\-k time\\-change\" /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b32 \\-S adjtimex,settimeofday,clock_settime \\-k time\\-change\" /etc/audit/rules.d/* || grep -i -r \"\\-w /etc/localtime \\-p wa \\-k time\\-change\" /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to monitor event that modify date and time have configured already, Nothing to do\"",
    "# Check if reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
      "log \"INFO\" \"The Rules to monitor event that modify date and time Did NOT configured, Working to configure it now\"",
      "printf \"",
"-a always,exit -F arch=b64 -S adjtimex,settimeofday,clock_settime -k time-change",
"-a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime -k time-change",
"-w /etc/localtime -p wa -k time-change",
"\" >> /etc/audit/rules.d/50-time-change.rules",

      "# Check previous command output",
      "if [ $? -eq 0 ]; then",
        "log \"INFO\" \"the values have been set successfully at /etc/audit/rules.d/50-time-change.rules file\"",
      "else",
        "log \"INFO\" \"failed to set the values at /etc/audit/rules.d/50-time-change.rules file\"  ",
        "CONTINUE=\"YES\"",
      "fi",

      "# Merge and load the rules into active configuration",
      "augenrules --load",
      "# Check previous command output",
      "if [ $? -eq 0 ]; then",
        "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
      "else",
        "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
        "CONTINUE=\"YES\"",
      "fi",

      "# Check is reboot is required",
      "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",


    "# 4.1.3.5 Ensure events that modify the system's network environment are collected (Automated)",
    "if grep -i -r \"\\-a always,exit \\-F arch=b64 \\-S sethostname,setdomainname \\-k system\\-locale\"  /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b32 \\-S sethostname,setdomainname \\-k system\\-locale\" /etc/audit/rules.d/* || grep -i -r \"\\-w /etc/issue \\-p wa \\-k system\\-locale\" /etc/audit/rules.d/* || grep -i -r \"\\-w /etc/issue.net \\-p wa \\-k system\\-locale\" /etc/audit/rules.d/* || grep -i -r \"\\-w /etc/hosts \\-p wa \\-k system\\-locale\" /etc/audit/rules.d/* || grep -i -r \"\\-w /etc/sysconfig/network \\-p wa \\-k system\\-locale\" /etc/audit/rules.d/* || grep -i -r \"\\-w /etc/sysconfig/network\\-scripts/ \\-p wa \\-k system\\-locale\" /etc/audit/rules.d/*; then",
      "log \"INFO\" \"The Rules to collect modify the system's network environment have configured already, Nothing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",

    "else",
    "log \"INFO\" \"The Rules to collect modify the system's network environment have NOT configured, Working on set it now\"",
    "printf \"",
    "-a always,exit -F arch=b64 -S sethostname,setdomainname -k system-locale",
    "-a always,exit -F arch=b32 -S sethostname,setdomainname -k system-locale",
    "-w /etc/issue -p wa -k system-locale",
    "-w /etc/issue.net -p wa -k system-locale",
    "-w /etc/hosts -p wa -k system-locale",
    "-w /etc/sysconfig/network -p wa -k system-locale",
    "-w /etc/sysconfig/network-scripts/ -p wa -k system-locale",
    "\" >> /etc/audit/rules.d/50-system_local.rules",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",


    "# 4.1.3.6 Ensure use of privileged commands are collected (Automated)",
    "build_audit_rules()",
    "(",
    "UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)",
    "AUDIT_RULE_FILE=\"/etc/audit/rules.d/50-privileged.rules\"",
    "NEW_DATA=()",
    "for PARTITION in $(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\" | awk '{print $1}'); do",
    "readarray -t DATA < <(find \"${PARTITION}\" -xdev -perm /6000 -type f | awk -v UID_MIN=${UID_MIN} '{print \"-a always,exit -F path=\" $1 \" -F perm=x -F auid>=\"UID_MIN\" -F auid!=unset -k privileged\" }')",
    "for ENTRY in \"${DATA[@]}\"; do",
    "NEW_DATA+=(\"${ENTRY}\")",
    "done",
    "done",
    "readarray &> /dev/null -t OLD_DATA < \"${AUDIT_RULE_FILE}\"",
    "COMBINED_DATA=( \"${OLD_DATA[@]}\" \"${NEW_DATA[@]}\" )",
    "printf '%s\n' \"${COMBINED_DATA[@]}\" | sort -u > \"${AUDIT_RULE_FILE}\"",
    ")",
    "build_audit_rules",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The Audit rules for use of privileged commands has been set successfully under /etc/audit/rules.d/50-privileged.rules\"",
    "else",
    "log \"INFO\" \"failed to set the values of Audit rules for use of privileged commands under /etc/audit/rules.d/50-privileged.rules\"",
    "CONTINUE=\"YES\"",
    "fi",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
   


    "# 4.1.3.7 Ensure unsuccessful file access attempts are collected (Automated)",
    "UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)",
    "if grep -i -r \"\\-a always,exit \\-F arch=b64 \\-S creat,open,openat,truncate,ftruncate \\-F exit=-EACCES \\-F auid>=${UID_MIN} \\-F auid!=unset \\-k access\" /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b64 \\-S creat,open,openat,truncate,ftruncate \\-F exit=-EPERM \\-F auid>=${UID_MIN} \\-F auid!=unset \\-k access\" /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b32 \\-S creat,open,openat,truncate,ftruncate \\-F exit=-EACCES \\-F auid>=${UID_MIN} \\-F auid!=unset \\-k access\" /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b32 \\-S creat,open,openat,truncate,ftruncate \\-F exit=-EPERM \\-F auid>=${UID_MIN} \\-F auid!=unset \\-k access\" /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to Collect the unsuccessful file access attempts is already exists, Nothing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to Collect the unsuccessful file access attempts is NOT exist, Working on set it now\"",
    "printf \"",
    "-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=${UID_MIN} -F auid!=unset -k access",
    "-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=${UID_MIN} -F auid!=unset -k access",
    "-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=${UID_MIN} -F auid!=unset -k access",
    "-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=${UID_MIN} -F auid!=unset -k access",
    "\" >> /etc/audit/rules.d/50-access.rules",
    "# Check Previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Successfully added rule for collecting unsuccessful file access attempts.\"",
    "else",
    "log \"INFO\" \"Failed to add rule for collecting unsuccessful file access attempts.\"",
    "fi",
    "# Merge and load the rules into active configuration",
    "augenrules --load       ",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",

    "# 4.1.3.8 Ensure events that modify user/group information are collected (Automated)",
    "printf \"",
    "\" >> /etc/audit/rules.d/50-identity.rules",
    "if grep -i -r \"\\-w /etc/group \\-p wa \\-k identity\" /etc/audit/rules.d/* || grep -i -r \"\\-w /etc/passwd \\-p wa \\-k identity\" /etc/audit/rules.d/* || grep -i -r \"\\-w /etc/gshadow \\-p wa \\-k identity\" /etc/audit/rules.d/* || grep -i -r \"\\-w /etc/shadow \\-p wa \\-k identity\" /etc/audit/rules.d/* || grep -i -r \"\\-w /etc/security/opasswd \\-p wa \\-k identity\" /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to Collect Modify users/groups is exist already, Nothing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to Collect Modify users/groups is not exist, working on set it now\"",
    "printf \"",
    "-w /etc/group -p wa -k identity",
    "-w /etc/passwd -p wa -k identity",
    "-w /etc/gshadow -p wa -k identity",
    "-w /etc/shadow -p wa -k identity",
    "-w /etc/security/opasswd -p wa -k identity",
    "\" >> /etc/audit/rules.d/50-identity.rules",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check if reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",


    "# 4.1.3.9 Ensure discretionary access control permission modification events are collected (Automated) ",
    "UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)",
    "if grep -i -r \"\\-a always,exit \\-F arch=b64 \\-S chmod,fchmod,fchmodat \\-F auid>=${UID_MIN} \\-F auid!=unset \\-F key=perm_mod\" /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b64 \\-S chown,fchown,lchown,fchownat \\-F auid>=${UID_MIN} \\-F auid!=unset \\-F key=perm_mod\" /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b32 \\-S chmod,fchmod,fchmodat \\-F auid>=${UID_MIN} \\-F auid!=unset \\-F key=perm_mod\" /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b32 \\-S lchown,fchown,chown,fchownat \\-F auid>=${UID_MIN} \\-F auid!=unset \\-F key=perm_mod\" /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b64 \\-S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr \\-F auid>=${UID_MIN} \\-F auid!=unset \\-F key=perm_mod\" /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b32 \\-S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr \\-F auid>=${UID_MIN} \\-F auid!=unset \\-F key=perm_mod\" /etc/audit/rules.d/*; then",
      "log \"INFO\" \"The Rules to collect access control permissions modifications have configured already, Nothing to do\"",
      "# Check is reboot is required",
      "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
      "log \"INFO\" \"The Rules to collect access control permissions modifications have NOT configured, working to set it now\"",
      "printf \"",
    "-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod",
    "-a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod",
    "-a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod",
    "-a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod ",
    "-a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod",
    "-a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod",
    "\" >> /etc/audit/rules.d/50-perm_mod.rules",
      "# Merge and load the rules into active configuration",
      "augenrules --load",
      "# Check previous command output",
      "if [ $? -eq 0 ]; then",
        "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
      "else",
        "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
        "CONTINUE=\"YES\"",
      "fi",
      "# Check is reboot is required",
      "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",


    "# 4.1.3.10 Ensure successful file system mounts are collected (Automated) ",
    "UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)",
    "if grep -i -r \"\\-a always,exit \\-F arch=b32 \\-S mount \\-F auid>=1000 \\-F auid!=unset \\-k mounts\" /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b64 \\-S mount \\-F auid>=1000 \\-F auid!=unset \\-k mounts\" /etc/audit/rules.d/*; then",
      "log \"INFO\" \"The Rules to collect successful file system mounts have configured already, Nothing to do\"",
      "# Check is reboot is required",
      "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
      "log \"INFO\" \"The Rules to collect successful file system mounts have NOT configured, Working on set it now\"",
      "printf \"",
    "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=unset -k mounts",
    "-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=unset -k mounts",
    "\" >> /etc/audit/rules.d/50-perm_mod.rules",
    "# Merge and load the rules into active configuration",
      "augenrules --load",
      "# Check previous command output",
      "if [ $? -eq 0 ]; then",
        "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
      "else",
        "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
        "CONTINUE=\"YES\"",
      "fi",
      "# Check is reboot is required",
      "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",


    "# 4.1.3.11 Ensure session initiation information is collected (Automated)",
    "if grep -i -r \"\\-w /var/run/utmp \\-p wa \\-k session\" /etc/audit/rules.d/* || grep -i -r \"\\-w /var/log/wtmp \\-p wa \\-k session\" /etc/audit/rules.d/* || grep -i -r \"\\-w /var/log/btmp \\-p wa \\-k session\" /etc/audit/rules.d/*; then",
      "log \"INFO\" \"The Rules to collect session initiation information have configured already, Nothing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to collect session initiation information have NOT configured. Working on set it now\"",
    "printf \"",
    "-w /var/run/utmp -p wa -k session",
    "-w /var/log/wtmp -p wa -k session",
    "-w /var/log/btmp -p wa -k session",
    "\" >> /etc/audit/rules.d/50-session.rules",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",

    "# 4.1.3.12 Ensure login and logout events are collected (Automated)",
    "if grep -i -r \"\\-w /var/log/lastlog \\-p wa \\-k logins\" /etc/audit/rules.d/* || grep -i -r \"\\-w /var/run/faillock \\-p wa \\-k logins\" /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to collect login and logout events have configured already, Nothing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to collect login and logout events have NOT configured, Working on set it now\"",
    "printf \"",
    "-w /var/log/lastlog -p wa -k logins",
    "-w /var/run/faillock -p wa -k logins",
    "\" >> /etc/audit/rules.d/50-login.rules",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",



    "# 4.1.3.13 Ensure file deletion events by users are collected (Automated) ",
    "UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)",
    "if grep -i -r \"\\-a always,exit \\-F arch=b64 \\-S rename,unlink,unlinkat,renameat \\-F auid>=${UID_MIN} \\-F auid!=unset \\-F key=delete\" /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F arch=b32 \\-S rename,unlink,unlinkat,renameat \\-F auid>=${UID_MIN} \\-F auid!=unset \\-F key=delete\"  /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to collect file deletion events have configured already, No thing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to collect file deletion events have NOT configured, Working on configure it now\"",
    "printf \"",
    "-a always,exit -F arch=b64 -S rename,unlink,unlinkat,renameat -F auid>=${UID_MIN} -F auid!=unset -F key=delete",
    "-a always,exit -F arch=b32 -S rename,unlink,unlinkat,renameat -F auid>=${UID_MIN} -F auid!=unset -F key=delete",
    "\" >> /etc/audit/rules.d/50-delete.rules",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",


    "# 4.1.3.14 Ensure events that modify the system's Mandatory Access Controls are collected (Automated)",
    "if grep -i -r \"\\-w /etc/selinux \\-p wa \\-k MAC-policy\" /etc/audit/rules.d/* || grep -i -r \"\\-w /usr/share/selinux \\-p wa \\-k MAC-policy\" /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to collect events that modify the system's Mandatory Access Controls have Configured already, Nothing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to collect events that modify the system's Mandatory Access Controls have NOT configured, Working on set it now\"",
    "printf \"",
    "-w /etc/selinux -p wa -k MAC-policy",
    "-w /usr/share/selinux -p wa -k MAC-policy",
    "\" >> /etc/audit/rules.d/50-MAC-policy.rules",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",


    "# 4.1.3.15 Ensure successful and unsuccessful attempts to use the chcon command are recorded (Automated)",
    "UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)",
    "if grep -i -r \"\\-a always,exit \\-F path=/usr/bin/chcon \\-F perm=x \\-F auid>=${UID_MIN} \\-F auid!=unset \\-k perm_chng\" /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to collect successful and unsuccessful attempts to use the chcon command have configured already, Nothing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to collect successful and unsuccessful attempts to use the chcon command have NOT configured, Working on set it now\"",
    "printf \"",
    "-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng",
    "\" >> /etc/audit/rules.d/50-perm_chng.rules",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",



    "# 4.1.3.16 Ensure successful and unsuccessful attempts to use the setfacl command are recorded (Automated)",
    "UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)",
    "if grep -i -r \"\\-a always,exit \\-F path=/usr/bin/setfacl \\-F perm=x \\-F auid>=${UID_MIN} \\-F auid!=unset \\-k perm_chng\" /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to collect successful and unsuccessful attempts to use the setfacl command have configured already, Nothing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to collect successful and unsuccessful attempts to use the setfacl command have NOT configured, working on set in now\"",
    "printf \"",
    "-a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng",
    "\" >> /etc/audit/rules.d/50-priv_cmd.rules",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",

    "# 4.1.3.17 Ensure successful and unsuccessful attempts to use the chacl command are recorded (Automated)",
    "UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)",
    "if grep -i -r \"\\-a always,exit \\-F path=/usr/bin/chacl \\-F perm=x \\-F auid>=${UID_MIN} \\-F auid!=unset \\-k perm_chng\" /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to collect successful and unsuccessful attempts to use the chacl command have configured already, No thing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to collect successful and unsuccessful attempts to use the chacl command have NOT configured, working on set it now\"",
    "printf \"",
    "-a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng",
    "\" >> /etc/audit/rules.d/50-perm_chng.rules",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",

    "# 4.1.3.18 Ensure successful and unsuccessful attempts to use the usermod command are recorded (Automated) ",
    "UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)",
    "if grep -i -r \"\\-a always,exit \\-F path=/usr/sbin/usermod \\-F perm=x \\-F auid>=${UID_MIN} \\-F auid!=unset \\-k usermod\" /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to collect successful and unsuccessful attempts to use the usermod command have configured already, Nothing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to collect successful and unsuccessful attempts to use the usermod command have NOT configured, working on set now\"",
    "printf \"",
    "-a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k usermod",
    "\" >> /etc/audit/rules.d/50-usermod.rules",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",

    "# 4.1.3.19 Ensure kernel module loading unloading and modification is collected (Automated)",
    "UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)",
    "if grep -i -r \"-\\a always,exit \\-F arch=b64 \\-S init_module,finit_module,delete_module,create_module,query_module \\-F auid>=${UID_MIN} \\-F auid!=unset \\-k kernel_modules\"  /etc/audit/rules.d/* || grep -i -r \"\\-a always,exit \\-F path=/usr/bin/kmod \\-F perm=x \\-F auid>=${UID_MIN} \\-F auid!=unset \\-k kernel_modules\" /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to collect kernel module loading unloading and modification have configured already, Nothing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to collect kernel module loading unloading and modification have NOT configured, Working on set it now\"",
    "printf \"",
    "-a always,exit -F arch=b64 -S init_module,finit_module,delete_module,create_module,query_module -F auid>=${UID_MIN} -F auid!=unset -k kernel_modules",
    "-a always,exit -F path=/usr/bin/kmod -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k kernel_modules",
    "\" >> /etc/audit/rules.d/50-kernel_modules.rules",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "fi",

    "# 4.1.3.20 Ensure the audit configuration is immutable (Automated)",
    "if grep -i -r \"\\-e 2\" /etc/audit/rules.d/*; then",
    "log \"INFO\" \"The Rules to Ensure the audit configuration is immutable have configured already, Nothing to do\"",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",
    "else",
    "log \"INFO\" \"The Rules to Ensure the audit configuration is immutable have NOT configured, working on set it now\"",
    "printf \"",
    "-e 2",
    "\" /etc/audit/rules.d/99-finalize.rules",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Ensure the audit configuration is imutable config has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Ensure the audit configuration is imutable configs\"",
    "fi",
    "fi",


    "# 4.1.3.21 Ensure the running and on disk configuration is the same (Manual)",
    "# Merge and load the rules into active configuration",
    "augenrules --load",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"Merge and load the rules into active configuration has been set successfully\"",
    "else",
    "log \"INFO\" \"failed to set the Merge and load the rules into active configuration\"  ",
    "CONTINUE=\"YES\"",
    "fi",
    "# Check is reboot is required",
    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi",



    "# 5.1.1 Ensure cron daemon is enabled (Automated)",
    "# Check if crond service is running",
    "if systemctl is-active --quiet crond; then",
    "log \"INFO\" \"crond service is running.\"",
    "else",
    "log \"INFO\" \"crond service is not running. Starting it...\"",
    "systemctl start crond",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"crond service has been started successfully\"",
    "else",
    "log \"INFO\" \"failed to start crond service\"",
    "CONTINUE=\"YES\"",
    "fi",
    "fi",
    "# Check if crond service is enabled",
    "if systemctl is-enabled --quiet crond; then",
    "log \"INFO\" \"crond service is enabled.\"",
    "else",
    "log \"INFO\" \"crond service is not enabled. Enabling it...\"",
    "systemctl enable crond",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"crond service has been enabled successfully\"",
    "else",
    "log \"INFO\" \"failed to enable crond service\"",
    "fi",
    "fi",
              
    "# 5.1.2 Ensure permissions on /etc/crontab are configured (Automated)",
    "# 5.1.3 Ensure permissions on /etc/cron.hourly are configured (Automated)",
    "# 5.1.4 Ensure permissions on /etc/cron.daily are configured (Automated)",
    "# 5.1.5 Ensure permissions on /etc/cron.weekly are configured (Automated)",
    "# 5.1.6 Ensure permissions on /etc/cron.monthly are configured (Automated)",
    "# 5.1.7 Ensure permissions on /etc/cron.d are configured (Automated)",
    "chown root:root /etc/cron*",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The root user has been set as Owner user/group on /etc/cron* successfully\"",
    "else",
    "log \"INFO\" \"failed to set the root as Owner user/group on /etc/cron*\"",
    "CONTINUE=\"YES\"",
    "fi",
    "chmod og-rwx /etc/cron*",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"remove the Read, Write, And execution permission from others and groups on /etc/cron* successfully\"",
    "else",
    "log \"INFO\" \"failed to remove the Read, Write, And execution permission from others and groups /etc/cron*\"",
    "fi",
              
              
    "#!/usr/bin/env bash",
    "# 5.1.8 Ensure cron is restricted to authorized users (Automated)",
    "cron_fix()",
    "{",
    "if rpm -q cronie >/dev/null; then",
    "# Delete the cron.deny if exist",
    "[ -e /etc/cron.deny ] && rm -f /etc/cron.deny",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The /etc/cron.deny file has been deleted successfully\"",
    "else",
    "log \"INFO\" \"The /etc/cron.deny file dose not exit already\"",
    "CONTINUE=\"YES\"",
    "fi",
    "# Create /etc/cron/allow if not exist",
    "[ ! -e /etc/cron.allow ] && touch /etc/cron.allow",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The /etc/cron.allow file has been Created successfully\"",
    "else",
    "log \"INFO\" \"failed/alreadyExist to create The /etc/cron.allow file\"",
    "CONTINUE=\"YES\"",
    "fi",
    "# Set permissions",
    "chown root:root /etc/cron.allow",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"the root user has been set as Owner and group Owner for /etc/cron.allow\"",
    "else",
    "log \"INFO\" \"failed to set the root user as Owner and group Owner for /etc/cron.allow\"",
    "CONTINUE=\"YES\"",
    "fi",
    "chmod u-x,go-rwx /etc/cron.allow",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The permission has been set successfully as the u-x,go-rwx\"",
    "else",
    "log \"INFO\" \"failed to set the permisssions as u-x,go-rwx\"",
    "CONTINUE=\"YES\"",
    "fi",
    "else",
    "log \"INFO\" \"cron is not installed on the system\"",
    "fi",
    "}",
    "# Call the function",
    "cron_fix",
    "## Explanation ##",
    "# /etc/cron.allow: If this file exists, only users listed in it are allowed to use the cron service. ",
    "# If the file doesn't exist, all users except those listed in /etc/cron.deny are permitted to use cron.",
              
    "#!/usr/bin/env bash",
    "at_fix()",
    "{",
    "if rpm -q at >/dev/null; then",
    "[ -e /etc/at.deny ] && rm -f /etc/at.deny",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The /etc/at.deny file has been deleted successfully\"",
    "else",
    "log \"INFO\" \"The /etc/at.deny file dose not exit already\"",
    "CONTINUE=\"YES\"",
    "fi",
    "[ ! -e /etc/at.allow ] && touch /etc/at.allow",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The /etc/at.allow file has been Created successfully\"",
    "else",
    "log \"INFO\" \"failed to create The /etc/at.allow file\"",
    "CONTINUE=\"YES\"",
    "fi",
    "# Set the permissions",
    "chown root:root /etc/at.allow",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"the root user has been set as Owner and group Owner for /etc/at.allow\"",
    "else",
    "log \"INFO\" \"failed to set the root user as Owner and group Owner for /etc/at.allow\"",
    "CONTINUE=\"YES\"",
    "fi",
    "chmod u-x,go-rwx /etc/at.allow",
    "else",
    "log \"INFO\" \"at is not installed on the system\"",
    "fi",
    "}",
    "# call the function",
    "at_fix",
              
              
    "# 5.2.1 Ensure permissions on /etc/ssh/sshd_config are configured (Automated)",
    "chown root:root /etc/ssh/sshd_config",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"the root user has been set as Owner and group Owner for /etc/ssh/sshd_config\"",
    "else",
    "log \"INFO\" \"failed to set the root user as Owner and group Owner for /etc/ssh/sshd_config\"",
    "CONTINUE=\"YES\"",
    "fi",
    "chmod og-rwx /etc/ssh/sshd_config",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The permission has been set successfully as og-rwx on /etc/ssh/sshd_config\"",
    "else",
    "log \"INFO\" \"failed to set the permisssions as og-rwx on /etc/ssh/sshd_config\"",
    "fi",

    "# 5.2.2 Ensure permissions on SSH private host key files are configured (Automated)",
    "find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chmod u-x,g-wx,o-rwx {} \\;",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The permission has been set successfully as u-x,g-wx,o-rwx on ssh_host_*_key\"",
    "else",
    "log \"INFO\" \"failed to set the permisssions as u-x,g-wx,o-rwx on ssh_host_*_key\"",
    "CONTINUE=\"YES\"",
    "fi",
    "find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chown root:root {} \\;",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"the root user has been set as Owner and group Owner for ssh_host_*_key\"",
    "else",
    "log \"INFO\" \"failed to set the root user  as Owner and group Owner for ssh_host_*_key\"",
    "fi",

    "# 5.2.3 Ensure permissions on SSH public host key files are configured (Automated)",
    "find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chmod u-x,go-wx {} \\;",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The permission has been set successfully as u-x,go-wx on ssh_host_*_key.pub\"",
    "else",
    "log \"INFO\" \"failed to set the permisssions as u-x,g-wx,o-rwx on ssh_host_*_key\"",
    "CONTINUE=\"YES\"",
    "fi",
    "find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chown root:root {} \\;",
    "# Check previous command output",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"the root user has been set as Owner and group Owner for ssh_host_*_key.pub\"",
    "else",
    "log \"INFO\" \"failed to set the root user as Owner and group Owner for ssh_host_*_key.pub\"",
    "fi",


    "# 5.2.5 Ensure SSH LogLevel is appropriate (Automated)",
    "sed -i '/LogLevel/ s/.*/LogLevel VERBOSE/' /etc/ssh/sshd_config",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The LogLevel value at /etc/ssh/sshd_config has been set to VERBOSE successfully\"",
    "else",
    "log \"INFO\" \"failed to set The LogLevel value at /etc/ssh/sshd_config to VERBOSE\"",
    "fi",

    "# 5.2.6 Ensure SSH PAM is enabled (Automated)",
    "sed -i '/UsePAM no/ s/.*/UsePAM yes/' /etc/ssh/sshd_config",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The UsePAM value at /etc/ssh/sshd_config has been set to yes successfully\"",
    "else",
    "log \"INFO\" \"failed/alreadyExist to set The UsePAM value at /etc/ssh/sshd_config to yes\"",
    "UsePAMvalue=$(cat /etc/ssh/sshd_config | grep -i usepam)",
    "log \"INFO\" \"The UsePAM value is: $UsePAMvalue\"",
    "fi",


    "# 5.2.7 Ensure SSH root login is disabled (Automated)",
    "sed -i '/PermitRootLogin yes/ s/.*/PermitRootLogin no/' /etc/ssh/sshd_config",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The PermitRootLogin value at /etc/ssh/sshd_config has been set to no successfully\"",
    "else",
    "log \"INFO\" \"failed/alreadyExist to set The PermitRootLogin value at /etc/ssh/sshd_config to no\"",
    "PermitRootLoginvalue=$(cat /etc/ssh/sshd_config | grep -i PermitRootLogin)",
    "log \"INFO\" \"The PermitRootLogin value is: $PermitRootLoginvalue\"",
    "fi",

    "# 5.2.8 Ensure SSH HostbasedAuthentication is disabled (Automated)",
    "sed -i '/HostbasedAuthentication yes/ s/.*/HostbasedAuthentication no/' /etc/ssh/sshd_config",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The HostbasedAuthentication value at /etc/ssh/sshd_config has been set to no successfully\"",
    "else",
    "log \"INFO\" \"failed/alreadyExist to set The HostbasedAuthentication value at /etc/ssh/sshd_config to no\"",
    "HostbasedAuthenticationvalue=$(cat /etc/ssh/sshd_config | grep -i HostbasedAuthentication)",
    "log \"INFO\" \"The HostbasedAuthentication value is: $HostbasedAuthenticationvalue\"",
    "fi",
    "# only password authentication or key-based authentication will be accepted.",


    "# 5.2.9 Ensure SSH PermitEmptyPasswords is disabled (Automated)",
    "sed -i '/PermitEmptyPasswords yes/ s/.*/PermitEmptyPasswords no/' /etc/ssh/sshd_config",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The PermitEmptyPasswords value at /etc/ssh/sshd_config has been set to no successfully\"",
    "else",
    "log \"INFO\" \"failed/alreadyExist to set The PermitEmptyPasswords value at /etc/ssh/sshd_config to no\"",
    "PermitEmptyPasswordsvalue=$(cat /etc/ssh/sshd_config | grep -i PermitEmptyPasswords)",
    "log \"INFO\" \"The PermitEmptyPasswords value is: $PermitEmptyPasswordsvalue\"",
    "fi",


    "# 5.2.11 Ensure SSH IgnoreRhosts is enabled (Automated)",
    "sed -i '/IgnoreRhosts no/ s/.*/IgnoreRhosts yes/' /etc/ssh/sshd_config",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The IgnoreRhosts value at /etc/ssh/sshd_config has been set to yes successfully\"",
    "else",
    "log \"INFO\" \"failed/alreadyExist to set The IgnoreRhosts value at /etc/ssh/sshd_config to yes\"",
    "IgnoreRhostsvalue=$(cat /etc/ssh/sshd_config | grep -i IgnoreRhosts)",
    "log \"INFO\" \"The IgnoreRhosts value is: $IgnoreRhostsvalue\"",
    "fi",

    "# 5.2.12 Ensure SSH X11 forwarding is disabled (Automated)",
    "sed -i '/X11Forwarding yes/ s/.*/X11Forwarding no/' /etc/ssh/sshd_config",
    "if [ $? -eq 0 ]; then",
    "log \"INFO\" \"The X11Forwarding value at /etc/ssh/sshd_config has been set to no successfully\"",
    "else",
    "log \"INFO\" \"failed/alreadyExist to set The X11Forwarding value at /etc/ssh/sshd_config to no\"",
    "X11Forwardingvalue=$(cat /etc/ssh/sshd_config | grep -i X11Forwarding)",
    "log \"INFO\" \"The X11Forwarding value is: $X11Forwardingvalue\"",
    "fi",

"# 5.2.13 Ensure SSH AllowTcpForwarding is disabled (Automated)",
"sed -i '/AllowTcpForwarding yes/ s/.*/AllowTcpForwarding no/' /etc/ssh/sshd_config",
"if [ $? -eq 0 ]; then",
"log \"INFO\" \"The AllowTcpForwarding value at /etc/ssh/sshd_config has been set to no successfully\"",
"else",
"log \"INFO\" \"failed/alreadyExist to set The AllowTcpForwarding value at /etc/ssh/sshd_config to no\"",
"AllowTcpForwardingvalue=$(cat /etc/ssh/sshd_config | grep -i AllowTcpForwarding)",
"log \"INFO\" \"The AllowTcpForwarding value is: $AllowTcpForwardingvalue\"",
"fi",


"# 5.2.6 Ensure SSH PAM is enabled (Automated)",
"sed -ri 's/^\\s*(CRYPTO_POLICY\\s*=.*)$/# \\1/' /etc/sysconfig/sshd",
"if [ $? -eq 0 ]; then",
"log \"INFO\" \"The CRYPTO_POLICY value at /etc/ssh/sshd_config has been hashed successfully\"",
"else",
"log \"INFO\" \"failed/alreadyExist to set The CRYPTO_POLICY value at /etc/ssh/sshd_config to hashed\"",
"CRYPTO_POLICYvalue=$(cat /etc/ssh/sshd_config | grep -i CRYPTO_POLICY)",
"log \"INFO\" \"The CRYPTO_POLICY value is: $CRYPTO_POLICYvalue\"",
"fi",
"systemctl reload sshd",
"if [ $? -eq 0 ]; then",
"log \"INFO\" \"The SSHD service has been reloaded successfully\"",
"else",
"log \"INFO\" \"failed to reload the SSHD service\"",
"fi",


"# 5.2.15 Ensure SSH warning banner is configured (Automated)",
"sed -i '/Banner/ s|.*|Banner /etc/issue.net|' /etc/ssh/sshd_config",
"if [ $? -eq 0 ]; then",
"log \"INFO\" \"The Banner value at /etc/ssh/sshd_config has been set to Banner /etc/issue.net successfully\"",
"else",
"log \"INFO\" \"failed/alreadyExist to set The Banner value at /etc/ssh/sshd_config to Banner /etc/issue.net\"",
"Bannervalue=$(cat /etc/ssh/sshd_config | grep -i Banner)",
"log \"INFO\" \"The Banner value is: $Bannervalue\"",
"fi",

"# 5.2.6 Ensure SSH PAM is enabled (Automated)",
"sed -i '/MaxAuthTries/ s/.*/MaxAuthTries 4/' /etc/ssh/sshd_config",
"if [ $? -eq 0 ]; then",
"log \"INFO\" \"The MaxAuthTries value at /etc/ssh/sshd_config has been set to 4 successfully\"",
"else",
"log \"INFO\" \"failed/alreadyExist to set The MaxAuthTries value at /etc/ssh/sshd_config to 4\"",
"MaxAuthTriesvalue=$(cat /etc/ssh/sshd_config | grep -i MaxAuthTries)",
"log \"INFO\" \"The MaxAuthTries value is: $MaxAuthTriesvalue\"",
"fi",

"# 5.2.18 Ensure SSH MaxSessions is set to 10 or less (Automated)",
"sed -i '/MaxSessions/ s/.*/MaxSessions 10/' /etc/ssh/sshd_config",
"if [ $? -eq 0 ]; then",
"log \"INFO\" \"The MaxSessions value at /etc/ssh/sshd_config has been set to 10 successfully\"",
"else",
"log \"INFO\" \"failed/alreadyExist to set The MaxSessions value at /etc/ssh/sshd_config to 10\"",
"MaxSessionsvalue=$(cat /etc/ssh/sshd_config | grep -i MaxSessions)",
"log \"INFO\" \"The MaxSessions value is: $MaxSessionsvalue\"",
"fi",


"# 5.2.19 Ensure SSH LoginGraceTime is set to one minute or less",
"sed -i '/LoginGraceTime/ s/.*/LoginGraceTime 60/' /etc/ssh/sshd_config",
"if [ $? -eq 0 ]; then",
"log \"INFO\" \"The LoginGraceTime value at /etc/ssh/sshd_config has been set to 60 successfully\"",
"else",
"log \"INFO\" \"failed/alreadyExist to set The LoginGraceTime value at /etc/ssh/sshd_config to 60\"",
"LoginGraceTimevalue=$(cat /etc/ssh/sshd_config | grep -i LoginGraceTime)",
"log \"INFO\" \"The LoginGraceTime value is: $LoginGraceTimevalue\"",
"fi",

"# 5.2.20 Ensure SSH Idle Timeout Interval is configured (Automated)",
"sed -i '/ClientAliveInterval/ s/.*/ClientAliveInterval 900/' /etc/ssh/sshd_config",
"if [ $? -eq 0 ]; then",
"log \"INFO\" \"The ClientAliveInterval value at /etc/ssh/sshd_config has been set to 900 successfully\"",
"else",
"log \"INFO\" \"failed/alreadyExist to set The ClientAliveInterval value at /etc/ssh/sshd_config to 900\"",
"ClientAliveIntervalvalue=$(cat /etc/ssh/sshd_config | grep -i ClientAliveInterval)",
"log \"INFO\" \"The ClientAliveInterval value is: $ClientAliveIntervalvalue\"",
"fi",
"sed -i '/ClientAliveCountMax/ s/.*/ClientAliveCountMax 0/' /etc/ssh/sshd_config",
"if [ $? -eq 0 ]; then",
"log \"INFO\" \"The ClientAliveCountMax value at /etc/ssh/sshd_config has been set to 0 successfully\"",
"else",
"log \"INFO\" \"failed/alreadyExist to set The ClientAliveCountMax value at /etc/ssh/sshd_config to 0\"",
"ClientAliveCountMaxvalue=$(cat /etc/ssh/sshd_config | grep -i ClientAliveCountMax)",
"log \"INFO\" \"The ClientAliveCountMax value is: $ClientAliveCountMaxvalue\"",
"fi"
          ]
        }
      }
    ]
  }